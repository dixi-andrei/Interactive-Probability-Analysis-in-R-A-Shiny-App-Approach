library(shiny); runApp('ProiectPS.R')
runApp('ProiectPS.R')
runApp('ProiectPS.R')
runApp('ProiectPS.R')
runApp('ProiectPS.R')
runApp('ProiectPS.R')
runApp('ProiectPS.R')
frepcomgen <- function(m, n) {
return(matrix(0, nrow = m, ncol = n))
}
m <- 2
n <- 3
print(repartitie_comuna)
# freqcom ca sa creem tabelul gol iar dupa ii vom pune valoriile
repartitie_comuna <- frepcomgen(m, n)
print(repartitie_comuna)
# b.
fcompleprecom <- function(freq_table, completions) {
for (completion in completions) {
freq_table[completion$x, completion$y] <- completion$value
}
return(freq_table)
}
completions <- list(
list(x=1, y=1, value=0.1),
list(x=1, y=2, value=0.2),
list(x=2, y=1, value=0.3),
list(x=2, y=3, value=0.4)
)
# completam repartitia cu valoriile pe care le-am pus in lista
repartitie_completa <- compleprecom(repartitie_comuna, completions)
print(repartitie_completa)
runApp('ProiectPS.R')
runApp('ProiectPS.R')
runApp('ProiectPS.R')
runApp('ProiectPS.R')
# a.
frepcomgen <- function(m, n) {
return(matrix(0, nrow = m, ncol = n))
}
m <- 2
n <- 3
# freqcom ca sa creem tabelul gol iar dupa ii vom pune valoriile
repartitie_comuna <- frepcomgen(m, n)
print(repartitie_comuna)
# b.
fcompleprecom <- function(freq_table, completions) {
for (completion in completions) {
freq_table[completion$x, completion$y] <- completion$value
}
return(freq_table)
}
fcompleprecom <- function(freq_table, completions) {
for (completion in completions) {
freq_table[completion$x, completion$y] <- completion$value
}
return(freq_table)
}
completions <- list(
list(x=1, y=1, value=0.1),
list(x=1, y=2, value=0.2),
list(x=2, y=1, value=0.3),
list(x=2, y=3, value=0.4)
)
# completam repartitia cu valoriile pe care le-am pus in lista
repartitie_completa <- compleprecom(repartitie_comuna, completions)
# completam repartitia cu valoriile pe care le-am pus in lista
repartitie_completa <- compleprecom(repartitie_comuna, completions)
print(repartitie_completa)
repartitie_completa <- compleprecom(repartitie_comuna, completions)
# a.
frepcomgen <- function(m, n) {
return(matrix(0, nrow = m, ncol = n))
}
m <- 2
n <- 3
# freqcom ca sa creem tabelul gol iar dupa ii vom pune valoriile
repartitie_comuna <- frepcomgen(m, n)
print(repartitie_comuna)
# a.
frepcomgen <- function(m, n) {
return(matrix(0, nrow = m, ncol = n))
}
m <- 2
n <- 3
# freqcom ca sa creem tabelul gol iar dupa ii vom pune valoriile
repartitie_comuna <- frepcomgen(m, n)
print(repartitie_comuna)
# aici vom avea afisat repartitia goala cu 0 peste tot
# b.
fcompleprecom <- function(freq_table, completions) {
for (completion in completions) {
freq_table[completion$x, completion$y] <- completion$value
}
return(freq_table)
}
fcompleprecom <- function(freq_table, completions) {
for (completion in completions) {
freq_table[completion$x, completion$y] <- completion$value
}
return(freq_table)
}
completions <- list(
list(x=1, y=1, value=0.1),
list(x=1, y=2, value=0.2),
list(x=2, y=1, value=0.3),
list(x=2, y=3, value=0.4)
)
# completam repartitia cu valoriile pe care le-am pus in lista
repartitie_completa <- compleprecom(repartitie_comuna, completions)
frepcomgen <- function(m, n) {
return(matrix(0, nrow = m, ncol = n))
}
m <- 2
n <- 3
# freqcom ca sa creem tabelul gol iar dupa ii vom pune valoriile
repartitie_comuna <- frepcomgen(m, n)
print(repartitie_comuna)
# aici vom avea afisat repartitia goala cu 0 peste tot
# b.
fcompleprecom <- function(freq_table, completions) {
for (completion in completions) {
freq_table[completion$x, completion$y] <- completion$value
}
return(freq_table)
}
completions <- list(
list(x=1, y=1, value=0.1),
list(x=1, y=2, value=0.2),
list(x=2, y=1, value=0.3),
list(x=2, y=3, value=0.4)
)
# completam repartitia cu valoriile pe care le-am pus in lista
repartitie_completa <- compleprecom(repartitie_comuna, completions)
frepmarginal <- function(repartitie_comuna) {
# repartitia marginala pentru X se calculeaza adunand coloanele
repartitia_marginala_X <- apply(repartitie_comuna, 1, sum, na.rm = TRUE)
# repartitia marginala pentru Y se calculeaza adunand randurile
repartitia_marginala_Y <- apply(repartitie_comuna, 2, sum, na.rm = TRUE)
# functia returneaza o lista cu ambele repartitii marginale
return(list(repartitia_marginala_X = repartitia_marginala_X,
repartitia_marginala_Y = repartitia_marginala_Y))
}
repartitii_marginale <- frepmarginal(repartitie_completa)
fpropcov <- function(repartitie_comuna, a, b, c, d) {
X <- row(repartitie_comuna)  # X este indexul randului
Y <- col(repartitie_comuna)  # Y este indexul coloanei
E_X <- sum(X * repartitie_comuna)
E_Y <- sum(Y * repartitie_comuna)
# calculam E[X] si E[Y]
# scriem Z si T
Z <- a * X + b * Y
T <- c * X + d * Y
# calculam E[Z], E[T] si E[ZT]
E_Z <- sum(Z * repartitie_comuna)
E_T <- sum(T * repartitie_comuna)
E_ZT <- sum(Z * T * repartitie_comuna)
# calculam covarianta Cov(Z,T)
cov_ZT <- E_ZT - E_Z * E_T
return(cov_ZT)
}
# dam valori coeficientilor a,b,c,d
a <- 2
b <- 3
c <- 2
d <- 1
# apelam functia cu repartitia de la punctul b si afisam covarianta
covarianta <- fpropcov(repartitie_completa, a, b, c, d)
# freqcom ca sa creem tabelul gol iar dupa ii vom pune valoriile
repartitie_comuna <- frepcomgen(m, n)
print(repartitie_comuna)
# b.
fcompleprecom <- function(freq_table, completions) {
for (completion in completions) {
freq_table[completion$x, completion$y] <- completion$value
}
return(freq_table)
}
completions <- list(
list(x=1, y=1, value=0.1),
list(x=1, y=2, value=0.2),
list(x=2, y=1, value=0.3),
list(x=2, y=3, value=0.4)
)
# completam repartitia cu valoriile pe care le-am pus in lista
repartitie_completa <- compleprecom(repartitie_comuna, completions)
